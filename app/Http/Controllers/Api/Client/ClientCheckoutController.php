<?phpnamespace CodeDelivery\Http\Controllers\Api\Client;use CodeDelivery\Http\Controllers\Controller;use CodeDelivery\Http\Requests;use CodeDelivery\Http\Requests\CheckoutRequest;use CodeDelivery\Repositories\OrderRepository;use CodeDelivery\Repositories\UserRepository;use CodeDelivery\Services\OrderService;use LucaDegasperi\OAuth2Server\Facades\Authorizer;class ClientCheckoutController extends Controller{    /**     * @var OrderRepository     */    private $orderRepository;    /**     * @var UserRepository     */    private $userRepository;    /**     * @var OrderService     */    private $orderService;    private $with = ['client','cupom','items'];    public function __construct(        OrderRepository $orderRepository,        UserRepository $userRepository,        OrderService $orderService    )    {        $this->orderRepository = $orderRepository;        $this->userRepository = $userRepository;        $this->orderService = $orderService;    }    public function index()    {        $id = Authorizer::getResourceOwnerId();        $clientId = $this->userRepository->find($id)->client->id;        $orders = $this->orderRepository            ->skipPresenter(false)            ->with($this->with)->scopeQuery(function ($query) use ($clientId) {                return $query->where('client_id', '=', $clientId);            })->paginate();        return $orders;    }    public function show($id)    {        return $this->orderRepository            ->skipPresenter(false)            ->with($this->with)->find($id);    }    public function store(CheckoutRequest $request)    {        $id = Authorizer::getResourceOwnerId();        $data = $request->all();        $clientId = $this->userRepository->find($id)->client->id;        $data['client_id'] = $clientId;        $order = $this->orderService->create($data);        return $this->orderRepository            ->skipPresenter(false)            ->with($this->with)            ->find($order->id);    }}